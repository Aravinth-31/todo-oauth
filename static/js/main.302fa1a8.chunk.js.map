{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","responseGoogle","r","console","log","state","newItem","list","key","value","this","setState","id","Math","random","slice","push","updatedList","filter","item","className","clientId","buttonText","onSuccess","onFailure","cookiePolicy","type","placeholder","onChange","e","updateInput","target","onClick","addItem","map","deleteItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kTAqFeA,E,kDAjFd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAiCPC,eAAe,SAACC,GACfC,QAAQC,IAAIF,IAjCZ,EAAKG,MAAM,CACVC,QAAQ,GACRC,KAAK,IAJW,E,wDAONC,EAAIC,GACfC,KAAKC,SAAL,eACEH,EAAMC,M,gCAKR,IAAMH,EAAQ,CACbM,GAAG,EAAEC,KAAKC,SACVL,MAAMC,KAAKL,MAAMC,QAAQS,SAGpBR,EAAK,YAAIG,KAAKL,MAAME,MAE1BA,EAAKS,KAAKV,GAEVI,KAAKC,SAAS,CACbJ,OAAKD,QAAQ,O,iCAIJM,GAEV,IAAMK,EAAYP,KAAKL,MAAME,KAAKW,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOA,KAE7DF,KAAKC,SAAS,CAACJ,KAAKU,M,+BAKZ,IAAD,OACP,OACC,yBAAKG,UAAU,OACd,6BACE,kBAAC,IAAD,CACCC,SAAS,4EACVC,WAAW,QACXC,UAAWb,KAAKT,eAChBuB,UAAWd,KAAKT,eAChBwB,aAAc,wBAEhB,6BACC,6BACA,2BAAOL,UAAU,MAChBM,KAAK,OACLC,YAAY,sBACZlB,MAAOC,KAAKL,MAAMC,QAClBsB,SAAU,SAACC,GAAD,OAAO,EAAKC,YAAY,UAAUD,EAAEE,OAAOtB,UAEtD,4BAAQW,UAAU,MACjBY,QAAS,kBAAI,EAAKC,YADnB,OAKA,6BACA,4BACEvB,KAAKL,MAAME,KAAK2B,KAAI,SAAAf,GACpB,OACC,wBAAIX,IAAKW,EAAKP,IACZO,EAAKV,MACN,4BACCuB,QAAS,kBAAI,EAAKG,WAAWhB,EAAKP,MADnC,gB,GApESwB,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.302fa1a8.chunk.js","sourcesContent":["import React,{ Component } from 'react';\nimport './App.css';\nimport GoogleLogin from \"react-google-login\";\nclass App extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tnewItem:'',\n\t\t\tlist:[]\n\t\t}\n\t}\n\tupdateInput(key,value){\n\t\tthis.setState({\n\t\t\t[key] :value\n\t\t});\n\t}\n\n\taddItem(){\n\t\tconst newItem={\n\t\t\tid:1+Math.random(),\n\t\t\tvalue:this.state.newItem.slice()\n\t\t};\n\n\t\tconst list=[...this.state.list];\n\n\t\tlist.push(newItem);\n\n\t\tthis.setState({\n\t\t\tlist,newItem:\"\"\n\t\t});\n\t}\n\n\tdeleteItem(id){\n\n\t\tconst updatedList=this.state.list.filter(item => item.id !== id);\n\n\t\tthis.setState({list:updatedList});\n\t}\n\tresponseGoogle=(r)=>{\n\t\tconsole.log(r);\n\t}\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"App\">\n\t\t\t\t<div>\n\t\t\t\t\t <GoogleLogin\n\t\t\t\t\t\t clientId=\"1075083842135-tj4tp4tslh05v27rv87qlc2meep42mf3.apps.googleusercontent.com\"\n\t\t\t\t\t\tbuttonText=\"Login\"\n\t\t\t\t\t\tonSuccess={this.responseGoogle}\n\t\t\t\t\t\tonFailure={this.responseGoogle}\n\t\t\t\t\t\tcookiePolicy={'single_host_origin'}></GoogleLogin>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<input className=\"inp\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Add an item here...\"\n\t\t\t\t\t\tvalue={this.state.newItem}\n\t\t\t\t\t\tonChange={(e) => this.updateInput(\"newItem\",e.target.value)} \n\t\t\t\t\t/>\n\t\t\t\t\t<button className=\"add\"\n\t\t\t\t\t\tonClick={()=>this.addItem()}\n\t\t\t\t\t>\n\t\t\t\t\tAdd\n\t\t\t\t\t</button>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{this.state.list.map(item=>{\n\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t<li key={item.id}>\n\t\t\t\t\t\t\t\t\t{item.value}\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={()=>this.deleteItem(item.id)}\n\n\t\t\t\t\t\t\t\t\t>X\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t};\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}